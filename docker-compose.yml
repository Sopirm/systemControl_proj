version: "3.9"

services:
  db:
    image: postgres:15-alpine
    container_name: sc_db
    environment:
      POSTGRES_USER: ${DB_USER:-postgres}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-postgres}
      POSTGRES_DB: ${DB_NAME:-systemcontrol}
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-postgres} -d ${DB_NAME:-systemcontrol}"]
      interval: 5s
      timeout: 5s
      retries: 10
    ports:
      - "${DB_PORT:-5432}:5432"
    networks:
      - app-net

  backend:
    build:
      context: .
      dockerfile: backend/Dockerfile
    container_name: sc_backend
    env_file:
      - .env
    environment:
      SERVER_PORT: ${SERVER_PORT:-8080}
      DB_HOST: db
      DB_PORT: 5432
      DB_USER: ${DB_USER:-postgres}
      DB_PASSWORD: ${DB_PASSWORD:-postgres}
      DB_NAME: ${DB_NAME:-systemcontrol}
      DB_SSLMODE: ${DB_SSLMODE:-disable}
      JWT_SECRET: ${JWT_SECRET:-change_me}
      JWT_EXPIRATION_HRS: ${JWT_EXPIRATION_HRS:-24}
    depends_on:
      db:
        condition: service_healthy
    command: ["/bin/sh", "-c", "/app/migrate && /app/server"]
    ports:
      - "${SERVER_PORT:-8080}:8080"
    restart: unless-stopped
    networks:
      - app-net

  frontend:
    build:
      context: .
      dockerfile: frontend/Dockerfile
    container_name: sc_frontend
    depends_on:
      - backend
    ports:
      - "${FRONTEND_PORT:-5173}:80"
    restart: unless-stopped
    networks:
      - app-net

volumes:
  pgdata:

networks:
  app-net: